setup () {
source $HOME/T-Load/.clr

##Colors
ul='\e[4m'
bd='\e[1m'
cn='\e[1;36m'
wt='\e[39m'
bk='\e[30m'
gr='\e[1;32m'
rd='\e[1;31m'
yl='\e[1;33m'
bl='\e[1;34m'
pp='\e[1;35m'
rt='\e[0m'
bbl='\e[44m'
bgy='\e[47m'
bgr='\e[102m'
bcn='\e[106m'
bwt='\e[107m'
##End Colors

###########################
## Remove existing tload ##
###########################
if [ -e $PREFIX/bin/tload ]
then
rm $PREFIX/bin/tload
fi

###################################
## Remove .msf_default directory ##
###################################
if [ -d $HOME/.msf_default ]
then
rm $HOME/.msf_default
fi

echo "Checking for dependecy Installations"

##################
## Install Java ##
##################

if [ -e $PREFIX/bin/java ]
then
	echo -e "Java is installed!"
	echo

else
clear
    echo "Installing java"
	echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	case `dpkg --print-architecture` in
	aarch64)
		archname="aarch64" ;;
	arm64)
		archname="aarch64" ;;
	armhf)
		archname="arm" ;;
	armv7l)
		archname="arm" ;;
	arm)
		archname="arm" ;;
	*)
		echo -e "\e[91mERROR: Unknown architecture."; echo; echo "Unable to install java. Embeding payload offline will not work"; sleep 5; exit ;;
	esac
	echo -e "\e[32m[*] \e[34mDownloading JDK-8 (~70Mb) for ${archname}..."
	wget https://github.com/Hax4us/java/releases/download/v8/jdk8_${archname}.tar.gz
	echo -e "\e[32m[*] \e[34mMoving JDK to system..."
	mv jdk8_${archname}.tar.gz $PREFIX/share
	echo -e "\e[32m[*] \e[34mExtracting JDK..."
	cd $PREFIX/share
	tar -xhf jdk8_${archname}.tar.gz
	echo -e "\e[32m[*] \e[34mMoving Java wrapper scripts to bin..."
	mv bin/* $PREFIX/bin
	echo -e "\e[32m[*] \e[34mCleaning up temporary files..."
	rm -rf $PREFIX/share/jdk8_${archname}.tar.gz
	rm -rf $PREFIX/share/bin
	echo
	echo -e "\e[32mJava was successfully installed!\e[39m"
	sleep 3
	echo
fi

#####################
## Apktool Install ##
#####################
if [ ! -e $PREFIX/bin/apktool ] || [ ! -e $PREFIX/bin/apktool.jar ]
then
echo "Installing apktool"
echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	clear
ln -s .files/aapt $PREFIX/bin/
ln -s .files/apktool $PREFIX/bin/apktool
ln -s .files/apktool.jar $PREFIX/bin/apktool.jar
chmod +x $PREFIX/bin/apktool*
chmod +x $PREFIX/bin/aapt
echo -e "\e[32mApktool was successfully installed!\e[39m"
sleep 5
else
echo -e "$gr Apktool is installed $rt"
fi

######################
## Install Zipalign ##
######################

if [ ! -e $PREFIX/bin/zipalign ]
then
echo "Installing  zipalign"
echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	clear
ln -s .files/zipalign $PREFIX/bin/zipalign
chmod +x $PREFIX/bin/zipalign
echo -e "\e[32mZipalign was successfully installed!\e[39m"
sleep 5
clear
else
echo -e "$gr Zipalign is installed $rt"
fi

########################
## Check for packages ##
########################
OS=$(./.setupcheck openssh)
SP=$(./.setupcheck sshpass)
CU=$(./.setupcheck curl)
RS=$(./.setupcheck rsync)
EX=$(./.setupcheck expect)
NA=$(./.setupcheck nano)
no=$(ls $HOME/.skstool_data | wc -l)
if [ "$OS" == "0" ] || [ "$SP" == "0" ] || [ "$CU" == "0" ] || [ "$RS" == "0" ] || [ "$EX" == "0" ] || [ "$NA" == "0" ] || [ ! -d $HOME/.skstool_data ]
then
clear
echo -e "$bgy $bl Welcome to T-Load. This must be your first use or the required files must have been deleted. So please wait untill all the required files have been setup.$rt"
echo ""
echo "Press enter to continue"
read garbage

fi

######################################
## Create .skstool_data_data folder ##
######################################
if [ ! -d $HOME/.skstool_data ]
then
mkdir $HOME/.skstool_data
fi

######################
## Install Packages ##
######################
if [ "$OS" == "1" ]
then
echo -e "$gr Openssh is installed $rt"
else
echo "Installing openssh"
sleep 2
pkg install openssh -y
fi
if [ "$SP" == "1" ]
then
echo -e "$gr Sshpass is installed $rt"
else
echo "Installing sshpass"
sleep 2
pkg install sshpass -y
fi
if [ "$CU" == "1" ]
then
echo -e "$gr Curl is installed $rt"
else
echo "Installing Curl"
sleep 2
pkg install curl
fi
if [ "$RS" == "1" ]
then
echo -e "$gr Rsync is installed $rt"
else
echo "Installing Rsync"
sleep 2
pkg install rsync -y
fi
if [ "$EX" == "1" ]
then
echo -e "$gr Expect is installed $rt"
else
echo "Installing Expect"
sleep 2
apt-get install expect -y
fi
if [ "$NA" == "1" ]
then
echo -e "$gr Nano is installed $rt"
else
echo "Installing Nano"
sleep 2
pkg install nano -y
fi

############################
## End of package install ##
############################

#################################
## Check for files in .skstool_data ##
#################################
if [ ! -e $HOME/.skstool_data/pay ]
then
touch $HOME/.skstool_data/pay
fi
if [ ! -e $HOME/.skstool_data/updates ]
then
touch $HOME/.skstool_data/updates
fi

###############################
## Set permisions for files  ##
###############################
cd $HOME/T-Load/
chmod +x *
chmod 600 psfkey
chmod 600 key

######################################
## Symlink test for executable file ##
######################################
if [ -e $PREFIX/bin/skstool ]
then
rm $PREFIX/bin/skstool
fi
ln -s skstool $PREFIX/bin/skstool

######################
## End of autosetup ##
######################

}
if [ "${1}" == "run" ]
then
echo "Running setup on manual invoke"
sleep 2
setup
elif [ "${1}" == "force" ]
then
echo -e "$rd WARNING! $bgw Force installation is initiated."
echo -e "$rd $bgw This may be unstable"
echo -e "$rd $bgw Proceed at your own risk"
echo -e "$rd $bgw This is untested by me"
echo -e "$rd $bgw Press [enter] to continue or [ctrl + c] to exit $rt"
read garbage 
echo ""
echo -e "$rd Force setup is initiated $rt"

##########################
## Start of force setup ##
##########################

########################
## Force Install Java ##
########################
echo "Installing java"
	echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	case `dpkg --print-architecture` in
	aarch64)
		archname="aarch64" ;;
	arm64)
		archname="aarch64" ;;
	armhf)
		archname="arm" ;;
	armv7l)
		archname="arm" ;;
	arm)
		archname="arm" ;;
	*)
		echo -e "\e[91mERROR: Unknown architecture."; echo; echo "Unable to install java. Embeding payload offline will not work"; sleep 5; exit ;;
	esac
	echo -e "\e[32m[*] \e[34mDownloading JDK-8 (~70Mb) for ${archname}..."
	wget https://github.com/Hax4us/java/releases/download/v8/jdk8_${archname}.tar.gz
	echo -e "\e[32m[*] \e[34mMoving JDK to system..."
	mv jdk8_${archname}.tar.gz $PREFIX/share
	echo -e "\e[32m[*] \e[34mExtracting JDK..."
	cd $PREFIX/share
	tar -xhf jdk8_${archname}.tar.gz
	echo -e "\e[32m[*] \e[34mMoving Java wrapper scripts to bin..."
	mv bin/* $PREFIX/bin
	echo -e "\e[32m[*] \e[34mCleaning up temporary files..."
	rm -rf $PREFIX/share/jdk8_${archname}.tar.gz
	rm -rf $PREFIX/share/bin
	echo
	echo -e "\e[32mJava was successfully installed!\e[39m"
	sleep 3
	echo
	
###########################
## Force install Apktool ##
###########################
echo "Installing apktool"
echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	clear
ln -s .files/aapt $PREFIX/bin/
ln -s .files/apktool $PREFIX/bin/apktool
ln -s .files/apktool.jar $PREFIX/bin/apktool.jar
chmod +x $PREFIX/bin/apktool*
chmod +x $PREFIX/bin/aapt
echo -e "\e[32mApktool was successfully installed!\e[39m"
sleep 5

############################
## Force install zipalign ##
############################
echo "Installing  zipalign"
echo ""
	echo "Take a screenshot if you find any error"
	echo ""
	echo "Press enter to continue"
	read garbage
	clear
ln -s .files/zipalign $PREFIX/bin/zipalign
chmod +x $PREFIX/bin/zipalign
echo -e "\e[32mZipalign was successfully installed!\e[39m"
sleep 5

echo -e "$bgw $bl Force setup was ran $rt"
echo "If you faced any errors, then please take a screen shot and post it in my forums along with log"
echo ""
echo "Press enter to exit"
read garbage 
exit 

else
echo "This setup will run automatically along with skstool"
echo -e "If you need to manually run then please use $bgw $bl setup run $rt command "
fi
